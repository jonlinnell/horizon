scalar DateTime

enum Role {
  USER,
  EDITOR,
  ADMIN
}

type User {
  id: ID,
  username: String,
  createdAt: String,
  updatedAt: String,
  roles: [Role],
}

type Event {
  id: ID,
  title: String,
  dateStart: DateTime,
  dateEnd: DateTime,
  summary: String,
  location: String,
  url: [String],
  public: Boolean,
  ticketed: Boolean,
  speakers: [String]
}

input UserInput {
  username: String!,
  password: String!,
  roles: [Role]!
}

input UpdateUserPasswordInput {
  id: ID!,
  newPassword: String!
}

input IdOnlyInput {
  id: ID!
}

input UpdateEventInput {
  # Need to look at this re: validation of required fields
  id: ID!,
  title: String,
  dateStart: DateTime,
  dateEnd: DateTime,
  summary: String,
  location: String,
  url: [String],
  public: Boolean,
  ticketed: Boolean,
  speakers: [String]
}

input EventInput {
  title: String!,
  dateStart: DateTime!,
  dateEnd: DateTime!,
  summary: String,
  location: String,
  url: [String],
  public: Boolean!,
  ticketed: Boolean!,
  speakers: [String]
}

type Query {
  authenticate(username: String!, password: String!): String!,
  events: [Event],
  eventById(id: ID!): Event,
  me: User
}

type Mutation {
  createNewUser(input: UserInput): User,
  updateUserPassword(input: UpdateUserPasswordInput): User,
  createNewEvent(input: EventInput): Event,
  updateEvent(input: UpdateEventInput): Event,
  deleteUser(input: IdOnlyInput): Boolean,
  deleteEvent(input: IdOnlyInput): Boolean,
}